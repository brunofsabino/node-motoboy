// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String

  motoboy   Motoboy[]
  userRoute Route[]
  client    Client[]

  @@map("users")
}

model Motoboy {
  id          String  @id @default(uuid())
  name        String  @unique
  email       String?
  celular     String  @unique
  cpf         String?
  address     String?
  rg          String?
  numberBoard String?
  cityBoard   String?
  userId      String

  user User @relation(fields: [userId], references: [id])

  motoboyInvoice Invoice[]
  motoboyRoute   MotoboyRoute[]

  @@map("motoboys")
}

model Route {
  id                     String   @id @default(uuid())
  requester              String?
  commentsEndRoute       String?
  clientId               String
  motoboyId              String?
  clientName             String
  cepStartRoute          String?
  cepEndRoute            String?
  startRoute             String?
  nameMotoboy            String?
  endRoute               String
  createdAt              DateTime @default(now())
  valueRoute             Int
  userId                 String
  description            String
  fieldLogradouroRoute   String?
  fieldLogradouroRoute2  String?
  fieldComplementoRoute  String?
  fieldComplementoRoute2 String?
  fieldBairroRoute       String?
  fieldBairroRoute2      String?
  fieldLocalidadeRoute   String?
  fieldLocalidadeRoute2  String?
  fieldNumeroRoute       String?
  fieldNumeroRoute2      String?
  done                   Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id])
  client Client @relation(fields: [clientId], references: [id])

  route        Invoice[]
  motoboyRoute MotoboyRoute[]

  @@map("routes")
}

model MotoboyRoute {
  id               String   @id @default(uuid())
  motoboyId        String
  clientId         String
  routeId          String
  nameMotoboy      String
  celularMotoboy   String?
  clientName       String
  cepStartRoute    String?
  cepEndRoute      String?
  startRoute       String?
  requesterRoute   String?
  commentsEndRoute String?
  endRoute         String
  createdAt        DateTime
  valueRoute       Int
  description      String

  boy    Motoboy @relation(fields: [motoboyId], references: [id])
  route  Route   @relation(fields: [routeId], references: [id])
  client Client  @relation(fields: [clientId], references: [id])

  @@map("motoboysRoutes")
}

model Client {
  id            String @id @default(uuid())
  nameFantasy   String
  corporateName String
  cnpj          String @unique
  address       String
  telephone     String
  cep           String
  city          String
  userId        String

  user         User           @relation(fields: [userId], references: [id])
  invoice      Invoice[]
  route        Route[]
  MotoboyRoute MotoboyRoute[]

  @@map("clients")
}

model TableValues {
  id            String @id @default(uuid())
  valueScore    Int
  district      String @unique
  valueDistrict Int

  @@map("tableValues")
}

model Invoice {
  id            String   @id @default(uuid())
  date          DateTime @default(now())
  motoboyId     String
  nameMotoboy   String
  numberBoard   String?
  cnpjId        String
  cnpj          String
  description   String
  numberInvoice Int      @default(autoincrement())
  nameFantasy   String
  corporateName String
  telephone     String
  idRoute       String
  requester     String?
  startRoute    String?
  endRoute      String
  valueRoute    Int

  route      Route   @relation(fields: [idRoute], references: [id])
  cnpjClient Client  @relation(fields: [cnpjId], references: [id])
  motoboy    Motoboy @relation(fields: [motoboyId], references: [id])

  @@map("invoices")
}
